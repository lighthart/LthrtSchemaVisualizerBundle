<!DOCTYPE html>
<html xmlns:xlink="http://www.w3.org/1999/xlink">
<head>
<meta charset="utf-8">
<style>

.link {
  fill: none;
  stroke: #666;
  stroke-width: 1.5px;
}

.link.oneToOne {
  stroke: green;
}

.link.oneToMany{
  stroke-dasharray: 0,2 1;
  stroke: blue;
}

.link.manyToOne{
  stroke-dasharray: 0,2 1;
  stroke: red;
}

.link.manyToMany{
  stroke-dasharray: 0,2 1;
}

rect {
  fill: #ccc;
  stroke: #333;
  stroke-width: 1.5px;
}

text {
  font: 1em sans-serif;
  pointer-events: none;
  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
}

div.json {
    width: 40%;
    display: inline-block;
    float:left;
}

div.svg {
    width:60%;
    display: inline-block;
    float:right;
}

</style>
</head>
<body>
<ul>
<li><a href="{{ path('all_schema') }}">All</a></li>
<li><a href="{{ path('all_graph_schema') }}">Graph</a></li>
<li><a href="{{ path('list_schema') }}">Back To List</a></li>
</ul>
<div class="json">
{% if class is defined %}
{{class}}
{% endif %}
{{json|json|raw}}
</div>
<div class="svg" id="paper">
  {# Get rid of this hard coded stuff #}
<link rel="stylesheet" type="text/css" href="/eval/bundles/lthrtschemavisualizer/css/joint.min.css" />
<script src="/eval/bundles/lthrtschemavisualizer/js/jquery.min.js"></script>
<script src="/eval/bundles/lthrtschemavisualizer/js/lodash.min.js"></script>
<script src="/eval/bundles/lthrtschemavisualizer/js/backbone-min.js"></script>
<script src="/eval/bundles/lthrtschemavisualizer/js/joint.min.js"></script>
<script src="/eval/bundles/lthrtschemavisualizer/js/joint.layout.DirectedGraph.min.js"></script>
<script>

var json = {{json|raw}};


var adjacencyList=[];

json.forEach(function(e) {
  source = e.source;
  if (adjacencyList.source) {
    adjacencyList.source.push(e.target);
  } else {
    adjacencyList.source = [e.target];
  }
});
console.log(json);
console.log(adjacencyList);

function buildGraphFromAdjacencyList(adjacencyList) {

    var elements = [];
    var links = [];
console.log('buildGraphFromAdjacencyList');
    _.each(adjacencyList, function(edges, parentElementLabel) {
      console.log('parentElementLabel');
      console.log(parentElementLabel);
        elements.push(makeElement(parentElementLabel));

        _.each(edges, function(childElementLabel) {
            links.push(makeLink(parentElementLabel, childElementLabel));
        });
    });

    // Links must be added after all the elements. This is because when the links
    // are added to the graph, link source/target
    // elements must be in the graph already.
    return elements.concat(links);
}

function makeLink(parentElementLabel, childElementLabel) {
  console.log('making link');

    return new joint.dia.Link({
        source: { id: parentElementLabel },
        target: { id: childElementLabel },
        attrs: { '.marker-target': { d: 'M 4 0 L 0 2 L 4 4 z' } },
        smooth: true
    });
}

function makeElement(label) {

    var maxLineLength = _.max(label.split('\n'), function(l) { return l.length; }).length;

    // Compute width/height of the rectangle based on the number
    // of lines in the label and the letter size. 0.6 * letterSize is
    // an approximation of the monospace font letter width.
    var letterSize = 8;
    var width = 2 * (letterSize * (0.6 * maxLineLength + 1));
    var height = 2 * ((label.split('\n').length + 1) * letterSize);

    return new joint.shapes.basic.Rect({
        id: label,
        size: { width: width, height: height },
        attrs: {
            text: { text: label, 'font-size': letterSize, 'font-family': 'monospace' },
            rect: {
                width: width, height: height,
                rx: 5, ry: 5,
                stroke: '#555'
            }
        }
    });
}

// Main.
// -----

var graph = new joint.dia.Graph;

var paper = new joint.dia.Paper({

    el: $('#paper'),
    width: 2000,
    height: 2000,
    gridSize: 1,
    model: graph
});

// Just give the viewport a little padding.
V(paper.viewport).translate(20, 20);

$('#btn-layout').on('click', layout);

function layout() {

    // try {
    //     var adjacencyList = eval('adjacencyList = ' + $('#adjacency-list').val());
    // } catch (e) { alert(e); }

    var cells = buildGraphFromAdjacencyList(adjacencyList);
    graph.resetCells(cells);
    joint.layout.DirectedGraph.layout(graph, { setLinkVertices: false });
}

$(window).ready(function(){
  console.log('ready');
  layout();
});

</script>
</div>
</body>
</html>