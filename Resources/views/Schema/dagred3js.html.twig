<script src="http://d3js.org/d3.v3.js" charset="utf-8"></script>
<script src="/eval/bundles/lthrtschemavisualizer/js/dagre-d3.min.js"></script>
<script type="text/javascript">
var adjacencyList={{adjacencyList|raw}};
var depth = {{depth}};
var urlRoot = "{{ app.request.getSchemeAndHttpHost() }}"+"{{ app.request.getBaseUrl() }}"+"/schema/graph/"+depth+"/";

console.log(adjacencyList);

function className(className) {
    className = className.split('_');
    className = className[className.length-1];
    return className;
}

var g = new dagreD3.graphlib.Graph().setGraph({});

Object.keys(adjacencyList).forEach(function(c) {
    g.setNode(c, {
        label: className(c), 
        url: urlRoot+c
    });
});


console.log(g);
Object.keys(adjacencyList).forEach(function(c) {
    if (adjacencyList[c].length) {
        adjacencyList[c].forEach(function(t) {
            g.setEdge(c, t, {
                label: ''
            });
        });
    }
});

// Set some general styles
g.nodes().forEach(function(v) {
    var node = g.node(v);
    console.log(node);
    node.rx = node.ry = 5;
});

var svg = d3.select("svg"),
inner = svg.select("g");

// Set up zoom support
var zoom = d3.behavior.zoom().on("zoom", function() {
    inner.attr("transform", "translate(" + d3.event.translate + ")" +
        "scale(" + d3.event.scale + ")");
});
svg.call(zoom);

// Create the renderer
var render = new dagreD3.render();

// Run the renderer. This is what draws the final graph.
render(inner, g);

// Center the graph
var initialScale = 0.75;
console.log(svg);

zoom
.translate([(svg.attr("width") - g.graph().width * initialScale) / 2, 20])
.scale(initialScale)
.event(svg);
svg.attr('height', g.graph().height * initialScale + 40);

console.log('Not Here');

var selections = inner.selectAll("g.node"); 
console.log(selections);
selections.on('click', function (d, i) {
    window.open(urlRoot+d);
});
</script>